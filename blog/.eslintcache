[{"C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\app\\App.js":"1","C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\blogPost\\APIService.js":"2","C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\blogPost\\AddBlogPost.js":"3","C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\blogPost\\ViewPosts.js":"4","C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\common\\PrivateRoute.js":"5","C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\common\\NavBar.js":"6","C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\user\\Login.js":"7","C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\user\\Signup.js":"8","C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\user\\Profile.js":"9","C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\index.js":"10","C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\reportWebVitals.js":"11","C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\constants\\index.js":"12"},{"size":3219,"mtime":1613163266159,"results":"13","hashOfConfig":"14"},{"size":3840,"mtime":1612994061359,"results":"15","hashOfConfig":"14"},{"size":2720,"mtime":1611603152987,"results":"16","hashOfConfig":"14"},{"size":7722,"mtime":1611771934965,"results":"17","hashOfConfig":"14"},{"size":536,"mtime":1611594457501,"results":"18","hashOfConfig":"14"},{"size":3083,"mtime":1611773028246,"results":"19","hashOfConfig":"14"},{"size":3294,"mtime":1613762214322,"results":"20","hashOfConfig":"14"},{"size":12638,"mtime":1613755085359,"results":"21","hashOfConfig":"14"},{"size":3261,"mtime":1611607965652,"results":"22","hashOfConfig":"14"},{"size":504,"mtime":1611350651951,"results":"23","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"14"},{"size":569,"mtime":1611595025032,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"idv61n",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"43"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"29"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\app\\App.js",["61","62","63","64"],"import './App.css';\nimport React, { Component } from 'react';\nimport {\n  Link,\n  withRouter,\n  Route,\n  BrowserRouter as Router,\n  Switch\n} from 'react-router-dom';\nimport Profile from '../user/Profile';\nimport AddBlogPost from '../blogPost/AddBlogPost';\nimport AppHeader from '../common/NavBar';\nimport ViewPosts from '../blogPost/ViewPosts';\nimport Login from '../user/Login';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport { getCurrentUser } from '../blogPost/APIService';\nimport { ACCESS_TOKEN } from '../constants';\nimport PrivateRoute from '../common/PrivateRoute';\nimport { notification } from 'antd';\nimport Signup from '../user/Signup';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: null,\n      isAuthenticated: false,\n      isLoading: false\n    }\n    this.handleLogout = this.handleLogout.bind(this);\n    this.loadCurrentUser = this.loadCurrentUser.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n  }\n  loadCurrentUser() {\n    this.setState({\n      isLoading: true\n    });\n    getCurrentUser()\n    .then(response => {\n      this.setState({\n        currentUser: response,\n        isAuthenticated: true,\n        isLoading: false\n      });\n    }).catch(error => {\n      this.setState({\n        isLoading: false\n      });  \n    });\n  }\n  handleLogout(redirectTo=\"/\", notificationType=\"success\", description=\"You're successfully logged out.\") {\n    localStorage.removeItem(ACCESS_TOKEN);\n\n    this.setState({\n      currentUser: null,\n      isAuthenticated: false\n    });\n\n    this.props.history.push(redirectTo);\n    \n    notification[notificationType]({\n      message: 'Polling App',\n      description: description,\n    });\n  }\n\n  handleLogin() {\n    notification.success({\n      message: 'Polling App',\n      description: \"You're successfully logged in.\",\n    });\n    this.loadCurrentUser();\n    this.props.history.push(\"/\");\n  }\n\n  render() {\n    if(this.state.isLoading) {\n      return <AutorenewIcon />\n    }\n  return (\n    <div>\n\n    {/* <AppHeader isAuthenticated={this.state.isAuthenticated} \n            currentUser={this.state.currentUser} \n            onLogout={this.handleLogout} /> */}\n    <Router>\n        <Route exact path=\"/\" \n                  render={(props) => <ViewPosts isAuthenticated={this.state.isAuthenticated} \n                      currentUser={this.state.currentUser} handleLogout={this.handleLogout} {...props} />}>\n        </Route>\n        <Route exact path=\"/add-post/:id\" component= {AddBlogPost}/>\n        <Route exact path=\"/posts\" component= {ViewPosts}/>\n        <Route path=\"/login\" \n                  render={(props) => <Login onLogin={this.handleLogin} {...props} />}></Route>\n                <Route path=\"/signup\" component={Signup}></Route>\n                <Route path=\"/users/:username\" \n                  render={(props) => <Profile isAuthenticated={this.state.isAuthenticated} currentUser={this.state.currentUser} {...props}  />}>\n                </Route>\n                <PrivateRoute authenticated={this.state.isAuthenticated} path=\"/poll/new\" component={AddBlogPost} handleLogout={this.handleLogout}></PrivateRoute>\n    </Router>\n    </div>\n  );\n}\n}\nexport default App;",["65","66"],"C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\blogPost\\APIService.js",[],["67","68"],"C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\blogPost\\AddBlogPost.js",["69","70","71","72","73","74"],"import React, { Component } from \"react\";\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from '@material-ui/core/Button';\r\nimport ViewPosts from '../blogPost/ViewPosts';\r\nimport { getPostById, createPost, updatePost } from './APIService';\r\n\r\nexport default class AddBlogPost extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n        id: this.props.match.params.id,\r\n        title: '',\r\n        body: ''\r\n      }\r\n      this.handleChangeTitle = this.handleChangeTitle.bind(this);\r\n      this.handleChangeBody= this.handleChangeBody.bind(this);\r\n      this.saveOrUpdatePost = this.saveOrUpdatePost.bind(this);\r\n    }\r\n    componentDidMount(){\r\n\r\n      // step 4\r\n      if(this.state.id === '_add'){\r\n          return\r\n      }else{\r\n          getPostById(this.state.id).then( (res) =>{\r\n              let post = res.data;\r\n              this.setState({title: post.title,\r\n                  body: post.body\r\n              });\r\n          });\r\n      }        \r\n  }\r\n  saveOrUpdatePost = (e) => {\r\n    e.preventDefault();\r\n    let post = {title: this.state.title, body: this.state.body};\r\n    console.log('post => ' + JSON.stringify(post));\r\n\r\n    // step 5\r\n    if(this.state.id === '_add'){\r\n        createPost(post).then(res =>{\r\n            // window.location.reload();\r\n            console.log(post);\r\n            this.props.history.push('/posts');\r\n        });\r\n    }else{\r\n        updatePost(post, this.state.id).then( res => {\r\n          this.props.history.push('/posts');\r\n        });\r\n    }\r\n    }\r\n    getTitle(){\r\n      if(this.state.id === '_add'){\r\n          return <h3 className=\"text-center\">Add Post</h3>\r\n      }else{\r\n          return <h3 className=\"text-center\">Update Post</h3>\r\n      }\r\n    }\r\n\r\n    handleChangeTitle = event => {\r\n      this.setState({ title: event.target.value});\r\n    }\r\n    handleChangeBody = event => {\r\n      this.setState({body: event.target.value });\r\n    }\r\n\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n              {\r\n                this.getTitle()\r\n              }\r\n            <label>\r\n\r\n              Title:\r\n              <input type=\"text\" name=\"title\" value = {this.state.title} onChange={this.handleChangeTitle} />\r\n              \r\n            </label>\r\n            <label>\r\n              Body:\r\n              <input type=\"text\" name=\"body\" value = {this.state.body} onChange={this.handleChangeBody} />\r\n            </label>\r\n            <button type=\"submit\" onClick={this.saveOrUpdatePost} >Add</button>\r\n\r\n            {/* <div>\r\n              <ViewPosts/>\r\n            </div> */}\r\n\r\n        </div>\r\n    );\r\n}\r\n}",["75","76"],"C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\blogPost\\ViewPosts.js",["77"],"import React from 'react'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { getPosts, getComments, addComments } from './APIService';\r\nimport Button from '@material-ui/core/Button';\r\nimport ThumbUpAltOutlinedIcon from '@material-ui/icons/ThumbUpAltOutlined';\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nexport default class ViewPosts extends React.Component {\r\n  \r\n  constructor(props) {\r\n      super(props)\r\n  \r\n      this.state = {\r\n           posts: [],\r\n           liked: false,\r\n           comments: [],\r\n           open: false,\r\n           isOpen: false,\r\n           comment:''\r\n      }\r\n\r\n      this.addPost = this.addPost.bind(this);\r\n      this.editPost = this.editPost.bind(this);\r\n      this.deleteRow = this.deleteRow.bind(this);\r\n      this.handleLikedClicked = this.handleLikedClicked.bind(this);\r\n      this.handleClickOpen = this.handleClickOpen.bind(this);\r\n      this.handleComment = this.handleComment.bind(this);\r\n      this.handleCommentChange = this.handleCommentChange.bind(this);\r\n  }\r\n  componentDidMount(){\r\n    getPosts().then((data) => {\r\n        console.log(JSON.stringify(data.data));\r\n        this.setState({ posts: data.data })\r\n    })\r\n    .catch(function (ex) {\r\n      console.log('Response parsing failed. Error: ', ex);\r\n    });\r\n    getComments().then((data)=> {\r\n      console.log(JSON.stringify(data.data));\r\n      this.setState({ comments:data.data })\r\n      console.log(this.state.comments[0]);\r\n    })\r\n    .catch(function (ex) {\r\n      console.log('Response parsing failed. Error: ', ex);\r\n  });\r\n  }\r\n  editPost(id) {\r\n    console.log('update ' + id)\r\n    this.props.history.push(`/add-post/${id}`);\r\n  }\r\n  handleLikedClicked(){\r\n    this.setState({\r\n      liked: !this.state.liked\r\n    });\r\n    console.log(this.state.liked);\r\n  }\r\n  addPost(){\r\n    this.props.history.push('/add-post/_add');\r\n  }\r\n  deleteRow(id, e){\r\n    axios.delete(`http://localhost:8080/api/post/${id}`)\r\n      .then(res => {\r\n        console.log(res);\r\n        console.log(res.data);\r\n  \r\n        const posts = this.state.posts.filter(item => item.id !== id);\r\n        this.setState({ posts });\r\n      })\r\n  }\r\n  handleCommentChange = event => {\r\n    this.setState({ comment: event.target.value});\r\n  }\r\n  handleClickOpen (){\r\n    console.log(\"INSIDE HANLDLE CLICK\");\r\n    this.setState({\r\n      open: !this.state.open\r\n    });\r\n    console.log(this.state.open);\r\n  };\r\n  handleClose = () => {\r\n    this.setState({\r\n      open: false\r\n    });\r\n\r\n  };\r\n  handleComment = () => {\r\n    let comment = {comment: this.state.comment};\r\n    console.log(comment);\r\n    addComments(comment).then(res =>{\r\n        this.props.history.push('/posts');\r\n    });\r\n    this.setState({\r\n      open: false\r\n    });\r\n\r\n  };\r\n  render(){\r\n    let result = this.state.posts.map(obj => {\r\n      let data = this.state.comments.find(item => item.id === obj.id);\r\n      return {...obj, ...data}\r\n    });\r\n    return(\r\n      <div>\r\n      <Table style={{width: '75%', margin: 'auto'}}>\r\n      <TableHead>\r\n        <TableRow >\r\n          <TableCell style={{fontWeight: \"bold\", textAlign: \"right\"}}>Title</TableCell>\r\n          <TableCell style={{fontWeight: \"bold\", textAlign: \"right\"}}>Body</TableCell>\r\n          <TableCell style={{ fontWeight: \"bold\", textAlign: \"right\"}}>Update/Delete</TableCell>\r\n          <TableCell style={{ fontWeight: \"bold\", textAlign: \"right\"}}>Liked</TableCell>\r\n          <TableCell style={{ fontWeight: \"bold\", textAlign: \"right\"}}>Comments</TableCell>\r\n          </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n                    {\r\n                        result.map(post =>\r\n                          <TableRow key={post.id}>\r\n                                    <TableCell align=\"right\">{post.title}</TableCell>\r\n                                    <TableCell align=\"right\">{post.body}</TableCell>\r\n                                    <TableCell align=\"right\"> \r\n                                      <button onClick={() => this.editPost(post.id)}>Update</button>\r\n                                      <button onClick={(e) => this.deleteRow(post.id, e)}>Delete</button>\r\n                                    </TableCell>\r\n                                    \r\n                                    {post.likes == true ?\r\n                                      <TableCell> \r\n                                      <Button onClick={this.handleLikedClick}><ThumbUpAltIcon/></Button>\r\n                                      </TableCell> \r\n                                      :\r\n                                      <TableCell> \r\n                                      <Button onClick={this.handleLikedClick}><ThumbUpAltOutlinedIcon/></Button>\r\n                                      </TableCell>\r\n                                    }\r\n                                    <TableCell>\r\n                                        {post.comment}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        <Button onClick ={this.handleClickOpen} >Add a comment</Button>\r\n                                        <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\r\n                                      <DialogTitle id=\"form-dialog-title\">Subscribe</DialogTitle>\r\n                                      <DialogContent>\r\n                                        <DialogContentText>\r\n                                          Add a Comment\r\n                                        </DialogContentText>\r\n                                        <TextField\r\n                                          autoFocus\r\n                                          margin=\"dense\"\r\n                                          id=\"name\"\r\n                                          label=\"Comment\"\r\n                                          type=\"email\"\r\n                                          fullWidth\r\n                                          value = {this.state.comment} \r\n                                          onChange={this.handleCommentChange}\r\n                                        />\r\n                                      </DialogContent>\r\n                                      <DialogActions>\r\n                                        <Button onClick={this.handleClose} color=\"primary\">\r\n                                          Cancel\r\n                                        </Button>\r\n                                        <Button onClick={this.handleComment} color=\"primary\">\r\n                                          Comment\r\n                                        </Button>\r\n                                      </DialogActions>\r\n                                    </Dialog>\r\n                                    </TableCell>\r\n                                    \r\n                          </TableRow>\r\n                          )\r\n                                  }\r\n\r\n            </TableBody>\r\n            <button className=\"btn btn-primary\" onClick={this.addPost}> Add Post</button>\r\n\r\n            </Table>\r\n            </div>\r\n    );\r\n}\r\n}",["78","79"],"C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\common\\PrivateRoute.js",[],["80","81"],"C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\common\\NavBar.js",["82","83"],"import React, { Component } from 'react';\r\nimport {\r\n    Link,\r\n    withRouter,\r\n    Router\r\n} from 'react-router-dom';\r\n\r\nimport { Layout, Menu, Dropdown, Icon } from 'antd';\r\nconst Header = Layout.Header;\r\n    \r\nclass AppHeader extends Component {\r\n    constructor(props) {\r\n        super(props);   \r\n        this.handleMenuClick = this.handleMenuClick.bind(this);   \r\n    }\r\n\r\n    handleMenuClick({ key }) {\r\n      if(key === \"logout\") {\r\n        this.props.onLogout();\r\n      }\r\n    }\r\n\r\n    render() {\r\n        let menuItems;\r\n        if(this.props.currentUser) {\r\n          menuItems = [\r\n            <Menu.Item key=\"/\">\r\n              <Link to=\"/\">\r\n                <Icon type=\"home\" className=\"nav-icon\" />\r\n              </Link>\r\n            </Menu.Item>,\r\n            <Menu.Item key=\"/poll/new\">\r\n           \r\n          </Menu.Item>,\r\n          <Menu.Item key=\"/profile\" className=\"profile-menu\">\r\n                <ProfileDropdownMenu \r\n                  currentUser={this.props.currentUser} \r\n                  handleMenuClick={this.handleMenuClick}/>\r\n            </Menu.Item>\r\n          ]; \r\n        } else {\r\n          menuItems = [\r\n            <Menu.Item key=\"/login\">\r\n              <Link to=\"/login\">Login</Link>\r\n            </Menu.Item>,\r\n            <Menu.Item key=\"/signup\">\r\n              <Link to=\"/signup\">Signup</Link>\r\n            </Menu.Item>                  \r\n          ];\r\n        }\r\n\r\n        return (\r\n            <Router>\r\n            <Header className=\"app-header\">\r\n            <div className=\"container\">\r\n              <div className=\"app-title\" >\r\n                <Link to=\"/\">Polling App</Link>\r\n              </div>\r\n              <Menu\r\n                className=\"app-menu\"\r\n                mode=\"horizontal\"\r\n                // selectedKeys={'/'}\r\n                style={{ lineHeight: '64px' }} >\r\n                  {menuItems}\r\n              </Menu>\r\n            </div>\r\n          </Header>\r\n          </Router>\r\n        );\r\n    }\r\n}\r\n\r\nfunction ProfileDropdownMenu(props) {\r\n  const dropdownMenu = (\r\n    <Menu onClick={props.handleMenuClick} className=\"profile-dropdown-menu\">\r\n      <Menu.Item key=\"user-info\" className=\"dropdown-item\" disabled>\r\n        <div className=\"user-full-name-info\">\r\n          {props.currentUser.name}\r\n        </div>\r\n        <div className=\"username-info\">\r\n          @{props.currentUser.username}\r\n        </div>\r\n      </Menu.Item>\r\n      <Menu.Divider />\r\n      <Menu.Item key=\"profile\" className=\"dropdown-item\">\r\n        <Link to={`/users/${props.currentUser.username}`}>Profile</Link>\r\n      </Menu.Item>\r\n      <Menu.Item key=\"logout\" className=\"dropdown-item\">\r\n        Logout\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <Dropdown \r\n      overlay={dropdownMenu} \r\n      trigger={['click']}\r\n      getPopupContainer = { () => document.getElementsByClassName('profile-menu')[0]}>\r\n      <a className=\"ant-dropdown-link\">\r\n         <Icon type=\"user\" className=\"nav-icon\" style={{marginRight: 0}} /> <Icon type=\"down\" />\r\n      </a>\r\n    </Dropdown>\r\n  );\r\n}\r\n\r\n\r\nexport default AppHeader;","C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\user\\Login.js",[],"C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\user\\Signup.js",["84"],"import React, { Component } from 'react';\r\nimport { signup} from '../blogPost/APIService';\r\nimport { Link } from 'react-router-dom';\r\nimport { \r\n    NAME_MIN_LENGTH, NAME_MAX_LENGTH, \r\n    USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH,\r\n    EMAIL_MAX_LENGTH,\r\n    PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH\r\n} from '../constants';\r\n\r\nimport { Form, Input, Button, notification } from 'antd';\r\nconst FormItem = Form.Item;\r\n\r\nclass Signup extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            firstName: {\r\n                value: ''\r\n            },\r\n            lastName:{\r\n                value:''\r\n            },\r\n            username: {\r\n                value: ''\r\n            },\r\n            email: {\r\n                value: ''\r\n            },\r\n            password: {\r\n                value: ''\r\n            }\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.isFormInvalid = this.isFormInvalid.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n    }\r\n\r\n    handleInputChange(event, validationFun) {\r\n        const target = event.target;\r\n        const inputName = target.name;        \r\n        const inputValue = target.value;\r\n\r\n        this.setState({\r\n            [inputName] : {\r\n                value: inputValue,\r\n                ...validationFun(inputValue)\r\n            }\r\n        });\r\n    }\r\n    handleSubmit(event) {\r\n        //event.preventDefault();\r\n    \r\n        const signupRequest = {\r\n            firstName: this.state.firstName.value,\r\n            lastName: this.state.lastName.value,\r\n            email: this.state.email.value,\r\n            username: this.state.username.value,\r\n            password: this.state.password.value\r\n        };\r\n        signup(signupRequest)\r\n        .then(response => {\r\n            notification.success({\r\n                message: 'Polling App',\r\n                description: \"Thank you! You're successfully registered. Please Login to continue!\",\r\n            });\r\n            console.log(\"Where am i\");     \r\n            this.props.history.push(\"/login\");\r\n        }).catch(error => {\r\n            notification.error({\r\n                message: 'Polling App',\r\n                description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n            });\r\n        });\r\n    }\r\n\r\n    isFormInvalid() {\r\n        return !(this.state.firstName.validateStatus === 'success' &&\r\n        this.state.lastName.validateStatus === 'success' &&\r\n            this.state.username.validateStatus === 'success' &&\r\n            this.state.email.validateStatus === 'success' &&\r\n            this.state.password.validateStatus === 'success'\r\n        );\r\n    }\r\n    \r\n    render() {\r\n        \r\n          const help = ()=> {\r\n            console.log(\"Onsubmit\")\r\n          }\r\n          const onFinishFailed = (errorInfo) => {\r\n            console.log(\"Failed:\", errorInfo);\r\n          };\r\n        return (\r\n            <div className=\"signup-container\">\r\n                <h1 className=\"page-title\">Sign Up</h1>\r\n                <div className=\"signup-content\">\r\n                    <Form \r\n                        //onSubmit={this.handleSubmit}\r\n                        name=\"basic\"\r\n                        onFinish={this.handleSubmit}\r\n                        onFinishFailed={onFinishFailed}>\r\n                        <FormItem\r\n                            label=\"First Name\"\r\n                            validateStatus={this.state.firstName.validateStatus}\r\n                            help={this.state.firstName.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"firstName\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"First Name:\"\r\n                                value={this.state.firstName.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validateFirstName)} />    \r\n                        </FormItem>\r\n                        <FormItem\r\n                            label=\"Full Name\"\r\n                            validateStatus={this.state.lastName.validateStatus}\r\n                            help={this.state.lastName.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"lastName\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Last Name:\"\r\n                                value={this.state.lastName.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validateLastName)} />    \r\n                        </FormItem>\r\n                        <FormItem label=\"Username\"\r\n                            hasFeedback\r\n                            validateStatus={this.state.username.validateStatus}\r\n                            help={this.state.username.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"username\" \r\n                                autoComplete=\"off\"\r\n                                placeholder=\"A unique username\"\r\n                                value={this.state.username.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validateUsername)} />    \r\n                        </FormItem>\r\n                        <FormItem \r\n                            label=\"Email\"\r\n                            hasFeedback\r\n                            validateStatus={this.state.email.validateStatus}\r\n                            help={this.state.email.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"email\" \r\n                                type=\"email\" \r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Your email\"\r\n                                value={this.state.email.value} \r\n                                \r\n                                onChange={(event) => this.handleInputChange(event, this.validateEmail)} />    \r\n                        </FormItem>\r\n                        <FormItem \r\n                            label=\"Password\"\r\n                            validateStatus={this.state.password.validateStatus}\r\n                            help={this.state.password.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"password\" \r\n                                type=\"password\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"A password between 6 to 20 characters\" \r\n                                value={this.state.password.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validatePassword)} />    \r\n                        </FormItem>\r\n                        <FormItem>\r\n                            <Button type=\"primary\" \r\n                                htmlType=\"submit\" \r\n                                size=\"large\" \r\n                                className=\"signup-form-button\"\r\n                                disabled={this.isFormInvalid()}\r\n                                >\r\n                                Sign up\r\n                            </Button>\r\n                            Already registed? <Link to=\"/login\">Login now!</Link>\r\n                        </FormItem>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    validateLastName = (lastName) => {\r\n        if(lastName.length < NAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (lastName.length > NAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n              };            \r\n        }\r\n    }\r\n    validateFirstName = (firstName) => {\r\n        if(firstName.length < NAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (firstName.length > NAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n              };            \r\n        }\r\n    }\r\n    validateEmail = (email) => {\r\n        if(!email) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Email may not be empty'                \r\n            }\r\n        }\r\n\r\n        const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\r\n        if(!EMAIL_REGEX.test(email)) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Email not valid'\r\n            }\r\n        }\r\n\r\n        if(email.length > EMAIL_MAX_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Email is too long (Maximum ${EMAIL_MAX_LENGTH} characters allowed)`\r\n            }\r\n        }\r\n\r\n        return {\r\n            validateStatus: 'success',\r\n            errorMsg: null\r\n        }\r\n    }\r\n\r\n    validateUsername = (username) => {\r\n        if(username.length < USERNAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Username is too short (Minimum ${USERNAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (username.length > USERNAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Username is too long (Maximum ${USERNAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null\r\n            }\r\n        }\r\n    }\r\n\r\n    validateUsernameAvailability() {\r\n        // First check for client side errors in username\r\n        const usernameValue = this.state.username.value;\r\n        const usernameValidation = this.validateUsername(usernameValue);\r\n\r\n        if(usernameValidation.validateStatus === 'error') {\r\n            this.setState({\r\n                username: {\r\n                    value: usernameValue,\r\n                    ...usernameValidation\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            username: {\r\n                value: usernameValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n    }\r\n        \r\n    validateEmailAvailability() {\r\n        // First check for client side errors in email\r\n        const emailValue = this.state.email.value;\r\n        const emailValidation = this.validateEmail(emailValue);\r\n\r\n        if(emailValidation.validateStatus === 'error') {\r\n            this.setState({\r\n                email: {\r\n                    value: emailValue,\r\n                    ...emailValidation\r\n                }\r\n            });    \r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            email: {\r\n                value: emailValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    validatePassword = (password) => {\r\n        if(password.length < PASSWORD_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Password is too short (Minimum ${PASSWORD_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (password.length > PASSWORD_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Password is too long (Maximum ${PASSWORD_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n            };            \r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Signup;","C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\user\\Profile.js",["85"],"import React, { Component } from 'react';\r\nimport { getUserProfile } from '../blogPost/APIService';\r\nimport { Avatar, Tabs } from 'antd';\r\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\r\n\r\nconst TabPane = Tabs.TabPane;\r\n\r\nclass Profile extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: null,\r\n            isLoading: false\r\n        }\r\n        this.loadUserProfile = this.loadUserProfile.bind(this);\r\n    }\r\n\r\n    loadUserProfile(username) {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n\r\n        getUserProfile(username)\r\n        .then(response => {\r\n            this.setState({\r\n                user: response,\r\n                isLoading: false\r\n            });\r\n        }).catch(error => {\r\n            if(error.status === 404) {\r\n                this.setState({\r\n                    isLoading: false\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    isLoading: false\r\n                });        \r\n            }\r\n        });        \r\n    }\r\n      \r\n    componentDidMount() {\r\n        const username = this.props.match.params.username;\r\n        this.loadUserProfile(username);\r\n    }\r\n\r\n    componentDidUpdate(nextProps) {\r\n        if(this.props.match.params.username !== nextProps.match.params.username) {\r\n            this.loadUserProfile(nextProps.match.params.username);\r\n        }        \r\n    }\r\n\r\n    render() {\r\n        if(this.state.isLoading) {\r\n            return <AutorenewIcon/>\r\n        }\r\n\r\n        const tabBarStyle = {\r\n            textAlign: 'center'\r\n        };\r\n\r\n        return (\r\n            <div className=\"profile\">\r\n                { \r\n                    this.state.user ? (\r\n                        <div className=\"user-profile\">\r\n                            <div className=\"user-details\">\r\n                                <div className=\"user-avatar\">\r\n                                    <Avatar className=\"user-avatar-circle\">\r\n                                        {this.state.user.name[0].toUpperCase()}\r\n                                    </Avatar>\r\n                                </div>\r\n                                <div className=\"user-summary\">\r\n                                    <div className=\"full-name\">{this.state.user.name}</div>\r\n                                    <div className=\"username\">@{this.state.user.username}</div>\r\n                                    <div className=\"user-joined\">\r\n                                        Joined\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"user-poll-details\">    \r\n                                <Tabs defaultActiveKey=\"1\" \r\n                                    animated={false}\r\n                                    tabBarStyle={tabBarStyle}\r\n                                    size=\"large\"\r\n                                    className=\"profile-tabs\">\r\n                                </Tabs>\r\n                            </div>  \r\n                        </div>  \r\n                    ): null               \r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Profile;","C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\index.js",[],"C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\reportWebVitals.js",[],"C:\\Users\\cheye\\Desktop\\blog\\blog\\blog\\src\\constants\\index.js",[],{"ruleId":"86","severity":1,"message":"87","line":4,"column":3,"nodeType":"88","messageId":"89","endLine":4,"endColumn":7},{"ruleId":"86","severity":1,"message":"90","line":5,"column":3,"nodeType":"88","messageId":"89","endLine":5,"endColumn":13},{"ruleId":"86","severity":1,"message":"91","line":8,"column":3,"nodeType":"88","messageId":"89","endLine":8,"endColumn":9},{"ruleId":"86","severity":1,"message":"92","line":12,"column":8,"nodeType":"88","messageId":"89","endLine":12,"endColumn":17},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"93","replacedBy":"97"},{"ruleId":"95","replacedBy":"98"},{"ruleId":"86","severity":1,"message":"99","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":26},{"ruleId":"86","severity":1,"message":"100","line":2,"column":8,"nodeType":"88","messageId":"89","endLine":2,"endColumn":13},{"ruleId":"86","severity":1,"message":"101","line":3,"column":8,"nodeType":"88","messageId":"89","endLine":3,"endColumn":17},{"ruleId":"86","severity":1,"message":"102","line":4,"column":8,"nodeType":"88","messageId":"89","endLine":4,"endColumn":18},{"ruleId":"86","severity":1,"message":"103","line":5,"column":8,"nodeType":"88","messageId":"89","endLine":5,"endColumn":14},{"ruleId":"86","severity":1,"message":"104","line":6,"column":8,"nodeType":"88","messageId":"89","endLine":6,"endColumn":17},{"ruleId":"93","replacedBy":"105"},{"ruleId":"95","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":136,"column":49,"nodeType":"109","messageId":"110","endLine":136,"endColumn":51},{"ruleId":"93","replacedBy":"111"},{"ruleId":"95","replacedBy":"112"},{"ruleId":"93","replacedBy":"113"},{"ruleId":"95","replacedBy":"114"},{"ruleId":"86","severity":1,"message":"90","line":4,"column":5,"nodeType":"88","messageId":"89","endLine":4,"endColumn":15},{"ruleId":"115","severity":1,"message":"116","line":99,"column":7,"nodeType":"117","endLine":99,"endColumn":40},{"ruleId":"86","severity":1,"message":"118","line":89,"column":17,"nodeType":"88","messageId":"89","endLine":89,"endColumn":21},{"ruleId":"86","severity":1,"message":"119","line":6,"column":7,"nodeType":"88","messageId":"89","endLine":6,"endColumn":14},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'withRouter' is defined but never used.","'Switch' is defined but never used.","'AppHeader' is defined but never used.","no-native-reassign",["120"],"no-negated-in-lhs",["121"],["120"],["121"],"'Component' is defined but never used.","'axios' is defined but never used.","'TextField' is defined but never used.","'Typography' is defined but never used.","'Button' is defined but never used.","'ViewPosts' is defined but never used.",["120"],["121"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["120"],["121"],["120"],["121"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'help' is assigned a value but never used.","'TabPane' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]